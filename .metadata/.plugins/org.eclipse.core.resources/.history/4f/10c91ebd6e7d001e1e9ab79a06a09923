/*
 ================================================================================================
 Name        : control_ecu_main.c
 Author      : Ahmed El-Askary.
 Description : Responsible for all the processing and decisions in the system like password
               checking, open the door and activate the system alarm.
 Date        : 5/6/2023.
 ================================================================================================
 */
#include <util/delay.h>
#include <avr/io.h>
#include "uart.h"
#include "external_eeprom.h"
#include "dc_motor.h"
#include "timer1.h"
#include "buzzer.h"
#include <avr/interrupt.h>
#include "twi.h"

/*******************************************************************************
 *                                Definitions                                  *
 *******************************************************************************/
#define READY_CONTROL_ECU                               0
#define ENTER_NEW_PASSWORD                              2
#define RE_ENTER_NEW_PASSWORD                           3
#define OPEN_DOOR                                       4
#define CLOSE_DOOR                                      5
#define BUZZER_ON                                       6
#define MAIN_OPTIONS                                    7

#define MATCHED_PASSWORD                                0
#define UNMATCHED_PASSWORD                              1

/*******************************************************************************
 *                                Global Variables                             *
 *******************************************************************************/

static volatile uint16 password;
static volatile uint16 save_password;
static volatile uint16 new_password;
static volatile uint16 reenter_password;
static volatile uint16 eepromSave_password;
static volatile uint16 eepromSave_location1;
static volatile uint16 eepromSave_location2;
static volatile uint16 KEY_NUM;
static volatile uint16 counter_password;
static volatile uint16 g_tick;



/*******************************************************************************
 *                         Functions Prototypes                                   *
 *******************************************************************************/
void Control_createPassword(void);
void Create_newPassword(void);
uint8 reenter_newPassword(void);
void save_newPassword(void);
uint8 main_options(void);
void Control_openDoor(void);
void enter_newPassword(void);
uint8 compare_newPassword (void);
void unmached_pass(void);
void Control_changePassword(void);

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

/*
 * Description :
 * Control create Password .
 */
Timer1_ConfigType Timer1_Config={0,3200,F_CPU_1024,CompareMode};
void Control_createPassword(void)
{
	while(1)
	{
		UART_sendByte(ENTER_NEW_PASSWORD);
		Create_newPassword();
		UART_sendByte(RE_ENTER_NEW_PASSWORD);

		uint8 again =reenter_newPassword();
		if(again==UNMATCHED_PASSWORD)
		{
			UART_sendByte(ENTER_NEW_PASSWORD);
		}
		else
		{
			break;
		}
	}
}
/*
 * Description :
 * Create Password .
 */
void Create_newPassword(void)
{
	uint16 i,recieve  ;
	new_password =0;
	UART_sendByte(READY_CONTROL_ECU);

	for(i=0;i<5;i++)
	{
		recieve= UART_recieveByte();
		if(recieve =='=')
		{
			break;
		}
		else
		{
			new_password =(new_password*10)+recieve;
		}
	}
}

/*
 * Description :
 * Reenter password .
 */
uint8 reenter_newPassword(void)
{
	uint8 i,  recieve;
	reenter_password = 0;
	UART_sendByte(READY_CONTROL_ECU);

	for(i = 0 ; i < 5; i++)
	{
		recieve =UART_recieveByte();
		if(recieve =='=')
		{
			break;
		}
		else
		{
			reenter_password =(reenter_password * 10)+ recieve;
		}
	}
	if (new_password ==reenter_password)
	{
		save_newPassword();
		return MATCHED_PASSWORD;
	}
	else
	{
		return UNMATCHED_PASSWORD;
	}
}

/*
 * Description :
 * Store Password .
 */
void save_newPassword(void)
{
	eepromSave_location1 =263 ;
	eepromSave_password= new_password;
	eepromSave_location2= eepromSave_location1;

	while(eepromSave_password !=  0 )
	{
		EEPROM_writeByte(eepromSave_location2,eepromSave_password %10);
		_delay_ms(10);
		eepromSave_location2++;
		eepromSave_password= eepromSave_password / 10;
	}
	eepromSave_location2--;
}

/*
 * Description :
 * Main Options , 1. Open door , 2. Change Password    .
 */
uint8 main_options(void)
{
	UART_sendByte(READY_CONTROL_ECU);

	while(1)
	{
		KEY_NUM = UART_recieveByte();
		if(	KEY_NUM == '+'  ||   KEY_NUM == '-' || KEY_NUM == '7' )
		{
			break;
		}
	}
	return KEY_NUM;
}

/*
 * Description :
 * Timer One Count    .
 */

void timer1(void)
{
	g_tick++;
}

/*
 * Description :
 *  Open Door.
 */
void open_door(void)
{
	DcMotor_Rotate(CW, 100);
	Timer1_setCallBack(timer1);
	Timer1_init(&Timer1_Config);
	while(g_tick <  15);

	Timer1_deInit();
	g_tick =0;
	DcMotor_Rotate(STOP, 0);
	Timer1_setCallBack(timer1);
	Timer1_init(&Timer1_Config);
	while(g_tick < 3);

	Timer1_deInit();
	g_tick =0;
}

/*
 * Description :
 * Close Door.
 */
void close_door(void)
{
	DcMotor_Rotate(ACW, 100);
	Timer1_setCallBack(timer1);
	Timer1_init(&Timer1_Config);
	while(g_tick < 15);

	Timer1_deInit();
	g_tick = 0 ;
	DcMotor_Rotate(STOP, 0);
}

/*
 * Description :
 * Control ECU Open Door.
 */
void Control_openDoor(void)
{
	while(1)
	{
		UART_sendByte(ENTER_NEW_PASSWORD);
		enter_newPassword();

		if (compare_newPassword() ==  MATCHED_PASSWORD)
		{
			counter_password = 0 ;
			UART_sendByte(OPEN_DOOR);
			open_door();
			UART_sendByte(CLOSE_DOOR);
			close_door();
			return;
		}
		else
		{
			unmached_pass();
		}
	}
}

/*
 * Description :
 * Enter Password
 */

void enter_newPassword(void)
{

	uint8 i,recieve;
	password = 0 ;
	UART_sendByte(0);

	for( i = 0 ; i < 5 ; i++ )
	{
		recieve= UART_recieveByte();
		if(recieve== '=')
		{
			break;
		}
		else
			password= (password*10)+recieve;
	}
}

/*
 * Description :
 * Compare Password
 */

uint8 compare_newPassword (void)
{
	save_password=0;
	uint16 i ;
	uint8 comp = 0 ;

	for( i = eepromSave_location2 ; i >= eepromSave_location1 ; i-- )
	{
		EEPROM_readByte(i ,  &comp );
		save_password = (save_password*10)+comp;
	}
	if(password == save_password)
	{
		return MATCHED_PASSWORD;
	}
	else
	{
		return UNMATCHED_PASSWORD;
	}
}
/*
 * Description :
 * Unmatched Password
 */

void unmached_pass(void)
{
	counter_password++;

	if( counter_password == 3 )
	{
		counter_password = 0 ;
		UART_sendByte(BUZZER_ON) ;
		Buzzer_on() ;
		Timer1_setCallBack(timer1);
		Timer1_init(&Timer1_Config);
		while(g_tick < 60);

		Timer1_deInit();
		g_tick =0;
		Buzzer_off();
	}
	return;
}


/*
 * Description :
 * Control ECU Change Password
 */
void Control_changePassword(void)
{
	while(1)
	{
		UART_sendByte(ENTER_NEW_PASSWORD) ;
		enter_newPassword() ;
		if ( compare_newPassword() == MATCHED_PASSWORD )
		{
			counter_password = 0 ;
			Control_createPassword() ;
			return;
		}
	}
}

#include <avr/io.h>
#include <util/delay.h>

#define BUTTON1_PIN 4
#define BUTTON2_PIN 5
#define BUTTON3_PIN 6
#define BUTTON4_PIN 7

#define LED4_PIN 4
#define LED5_PIN 5
#define LED6_PIN 6
#define LED7_PIN 7

void initGPIO();
void handlePushButton1();
void handlePushButton2();
void handlePushButton3();
void handlePushButton4();

void initGPIO() {
	// Set LED pins as outputs
	DDRB |= (1 << LED4_PIN) | (1 << LED5_PIN) | (1 << LED6_PIN) | (1 << LED7_PIN);

	// Set button pins as inputs
	DDRD &= ~((1 << BUTTON1_PIN) | (1 << BUTTON2_PIN) | (1 << BUTTON3_PIN) | (1 << BUTTON4_PIN));

	// Enable internal pull-up resistors for button pins
	PORTD |= (1 << BUTTON1_PIN) | (1 << BUTTON2_PIN) | (1 << BUTTON3_PIN) | (1 << BUTTON4_PIN);
}

void handlePushButton1() {
	// Toggle LED 4 and LED 5
	if (PINB & (1 << LED4_PIN)) {
		// LED 4 and LED 5 are currently ON
		PORTB &= ~((1 << LED4_PIN) | (1 << LED5_PIN)); // Turn OFF LED 4 and LED 5
	} else {
		// LED 4 and LED 5 are currently OFF
		PORTB |= (1 << LED4_PIN) | (1 << LED5_PIN); // Turn ON LED 4 and LED 5
	}
}

void handlePushButton2() {
	// Toggle LED 6 and LED 7
	if (PINB & (1 << LED6_PIN)) {
		// LED 6 and LED 7 are currently ON
		PORTB &= ~((1 << LED6_PIN) | (1 << LED7_PIN)); // Turn OFF LED 6 and LED 7
	} else {
		// LED 6 and LED 7 are currently OFF
		PORTB |= (1 << LED6_PIN) | (1 << LED7_PIN); // Turn ON LED 6 and LED 7
	}
}

void handlePushButton3() {
	// Turn on/off front red light (LED 4 and LED 7)
	if (PINB & (1 << LED4_PIN)) {
		// Front red light is currently ON
		PORTB &= ~((1 << LED4_PIN) | (1 << LED7_PIN)); // Turn OFF front red light (LED 4 and LED 7)
	} else {
		// Front red light is currently OFF
		PORTB |= (1 << LED4_PIN) | (1 << LED7_PIN); // Turn ON front red light (LED 4 and LED 7)
	}
}

void handlePushButton4() {
	// Turn on/off back red light (LED 5 and LED 6)
	if (PINB & (1 << LED5_PIN)) {
		// Back red light is currently ON
		PORTB &= ~((1 << LED5_PIN) | (1 << LED6_PIN)); // Turn OFF back red light (LED 5 and LED 6)
	} else {
		// Back red light is currently OFF
		PORTB |= (1 << LED5_PIN) | (1 << LED6_PIN); // Turn ON back red light (LED 5 and LED 6)
	}
}


//int main(void) {
//	initGPIO();
//
//	while (1) {
//		// Check push button states and perform actions accordingly
//
//		// Button 1 actions
//		if (!(PIND & (1 << BUTTON1_PIN))) {
//			handlePushButton1();
//			_delay_ms(200); // Debounce delay
//		}
//
//		// Button 2 actions
//		if (!(PIND & (1 << BUTTON2_PIN))) {
//			handlePushButton2();
//			_delay_ms(200); // Debounce delay
//		}
//
//		// Button 3 actions
//		if (!(PIND & (1 << BUTTON3_PIN))) {
//			handlePushButton3();
//			_delay_ms(200); // Debounce delay
//		}
//
//		// Button 4 actions
//		if (!(PIND & (1 << BUTTON4_PIN))) {
//			_delay_ms(2000); // Delay for 2 seconds
//
//			// Check if the button is still pressed after the delay
//			if (!(PIND & (1 << BUTTON4_PIN))) {
//				handlePushButton4();
//				_delay_ms(200); // Debounce delay
//			}
//		}
//	}
//
//	return 0;
//}




/*******************************************************************************
 *                        Main Control ECU Functions                           *
 *******************************************************************************/
int main(void)
{
	initGPIO();


	Buzzer_init();
	DcMotor_init();
	SREG  |= (1<<7) ;

	UART_ConfigType UART_Config ={BIT_8 , DISABLED_PARITY , STOP_ONE_BIT , 9600 };
	UART_init( &UART_Config );

	TWI_ConfigType TWI_Config ={ 0x01 , 0x02 } ;
	TWI_init( &TWI_Config ) ;

	while( UART_recieveByte() != 0 ) ;
	Control_createPassword();

	while(1)
	{
		UART_sendByte(MAIN_OPTIONS);

		if(main_options() == '+' )
		{
			Control_openDoor();
		}

		else
		{
			Control_changePassword();
		}


		if (!(PIND & (1 << BUTTON1_PIN))) {
			handlePushButton1();
			_delay_ms(200); // Debounce delay
		}

		// Button 2 actions
		if (!(PIND & (1 << BUTTON2_PIN))) {
			handlePushButton2();
			_delay_ms(200); // Debounce delay
		}

		// Button 3 actions
		if (!(PIND & (1 << BUTTON3_PIN))) {
			handlePushButton3();
			_delay_ms(200); // Debounce delay
		}

		// Button 4 actions
		if (!(PIND & (1 << BUTTON4_PIN))) {
			_delay_ms(2000); // Delay for 2 seconds

			// Check if the button is still pressed after the delay
			if (!(PIND & (1 << BUTTON4_PIN))) {
				handlePushButton4();
				_delay_ms(200); // Debounce delay
			}
		}
	}

	return 0;


}


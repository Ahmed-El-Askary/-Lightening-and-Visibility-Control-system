/*
 ================================================================================================
 Name        : control_ecu_main.c
 Author      : Ahmed El-Askary.
 Description : Responsible for all the processing and decisions in the system like password
               checking, open the door and activate the system alarm.
 Date        : 5/6/2023.
 ================================================================================================
 */
#include <util/delay.h>
#include <avr/io.h>
#include "uart.h"
#include "external_eeprom.h"
#include "dc_motor.h"
#include "timer1.h"
#include "buzzer.h"
#include <avr/interrupt.h>
#include "twi.h"

/*******************************************************************************
 *                                Definitions                                  *
 *******************************************************************************/
#define READY_CONTROL_ECU                               0
#define ENTER_NEW_PASSWORD                              2
#define RE_ENTER_NEW_PASSWORD                           3
#define OPEN_DOOR                                       4
#define CLOSE_DOOR                                      5
#define BUZZER_ON                                       6
#define MAIN_OPTIONS                                    7
#define Control_light                                   8

#define MATCHED_PASSWORD                                0
#define UNMATCHED_PASSWORD                              1

/*******************************************************************************
 *                                Global Variables                             *
 *******************************************************************************/

static volatile uint16 password;
static volatile uint16 save_password;
static volatile uint16 new_password;
static volatile uint16 reenter_password;
static volatile uint16 eepromSave_password;
static volatile uint16 eepromSave_location1;
static volatile uint16 eepromSave_location2;
static volatile uint16 KEY_NUM;
static volatile uint16 counter_password;
static volatile uint16 g_tick;


//////////////////////////////////////

// Define button states
#define BUTTON_NOT_PRESSED 0
#define BUTTON_PRESSED_ONCE 1
#define BUTTON_PRESSED_TWICE 2
#define BUTTON_LONG_HOLD 3
#define BUTTON_SHORT_HOLD 4

// Define LED pins
#define LEFT_YELLOW_LED_PIN 0
#define RIGHT_YELLOW_LED_PIN 1
#define FRONT_RED_LED_PIN 2
#define BACK_RED_LED_PIN 3

// Global variables
volatile uint8_t buttonState = BUTTON_NOT_PRESSED;
volatile uint8_t buttonPressedCount = 0;
volatile uint8_t buttonHoldTime = 0;

// Function declarations
void initGPIO();
void initTimer();
void checkButtonState();
void handleButtonPress();

void initGPIO()
{
    // Set button pins as inputs
    DDRA &= ~(1 << PA0) & ~(1 << PA1) & ~(1 << PA2) & ~(1 << PA3);

    // Set LED pins as outputs
    DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3);
}

void initTimer()
{
    // Set up Timer1 with 1ms interval
    TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10); // CTC mode, prescaler 64
    OCR1A = 249; // Compare value for 1ms (16MHz/64/1000Hz - 1)

    TIMSK1 |= (1 << OCIE1A); // Enable Timer1 compare interrupt
}

void checkButtonState()
{
    static uint8_t lastButtonState = BUTTON_NOT_PRESSED;
    static uint8_t debounceCounter = 0;

    uint8_t currentButtonState = BUTTON_NOT_PRESSED;
    uint8_t buttonStateChange = 0;

    // Read button pins
    uint8_t button1 = PINA & (1 << PA0);
    uint8_t button2 = PINA & (1 << PA1);
    uint8_t button3 = PINA & (1 << PA2);
    uint8_t button4 = PINA & (1 << PA3);

    // Check if any button is pressed
    if (button1 || button2 || button3 || button4)
    {
        debounceCounter++;

        if (debounceCounter >= 10)
        {
            currentButtonState = BUTTON_PRESSED_ONCE;
            buttonStateChange = (currentButtonState != lastButtonState);
        }
    }
    else
    {
        debounceCounter = 0;
    }

    // Check for button state changes
    if (buttonStateChange)
    {
        lastButtonState = currentButtonState;

        if (currentButtonState == BUTTON_PRESSED_ONCE)
        {
            buttonPressedCount++;
        }
        else if (currentButtonState == BUTTON_NOT_PRESSED)
        {
            if (buttonPressedCount == 1)
            {
                buttonState = BUTTON_PRESSED_ONCE;
            }
            else if (buttonPressedCount == 2)
            {
                buttonState = BUTTON_PRESSED_TWICE;
            }

            buttonPressedCount = 0;
            buttonHoldTime = 0;
        }
    }

    // Check button hold time for long hold and short hold
    if (buttonPressedCount == 1 && currentButtonState == BUTTON_PRESSED_ONCE)
    {
        buttonHoldTime++;

        if (buttonHoldTime >= 200) // 200 * 5ms = 1000ms = 1 second
        {
            buttonState = BUTTON_LONG_HOLD;
        }
    }
    else if (buttonPressedCount == 2 && currentButtonState == BUTTON_PRESSED_ONCE)
    {
        buttonHoldTime++;

        if (buttonHoldTime >= 1000) // 1000 * 5ms = 5000ms = 5 seconds
        {
            buttonState = BUTTON_SHORT_HOLD;
        }
    }
}

void handleButtonPress()
{
    switch (buttonState)
    {
        case BUTTON_PRESSED_ONCE:
            if (buttonPressedCount == 1)
            {
                // Left Warning Yellow Flasher
                PORTB ^= (1 << LEFT_YELLOW_LED_PIN);
            }
            break;

        case BUTTON_PRESSED_TWICE:
            if (buttonPressedCount == 2)
            {
                // Right Warning Yellow Flasher
                PORTB ^= (1 << RIGHT_YELLOW_LED_PIN);
            }
            break;

        case BUTTON_LONG_HOLD:
            //Apologies for the incomplete response. Here's the continuation of the code:

            if (buttonPressedCount == 1)
            {
                // Front Red Light
                PORTB ^= (1 << FRONT_RED_LED_PIN);
            }
            break;

        case BUTTON_SHORT_HOLD:
            if (buttonPressedCount == 2)
            {
                // Back Red Light
                PORTB ^= (1 << BACK_RED_LED_PIN);
            }
            break;

        default:
            break;
    }
}

// Timer1 compare interrupt handler (1ms interval)
ISR(TIMER1_COMPA_vect)
{
    static uint16_t debounceCount = 0;

    // Debounce button input
    if ((PINA & (1 << PA0)) == 0)
    {
        debounceCount++;
        if (debounceCount >= 5)
        {
            buttonState = BUTTON_NOT_PRESSED;
        }
    }
    else
    {
        debounceCount = 0;
    }
}

///////////////////////////////////////////
/*******************************************************************************
 *                         Functions Prototypes                                   *
 *******************************************************************************/
void Control_createPassword(void);
void Create_newPassword(void);
uint8 reenter_newPassword(void);
void save_newPassword(void);
uint8 main_options(void);
void Control_openDoor(void);
void enter_newPassword(void);
uint8 compare_newPassword (void);
void unmached_pass(void);
void Control_changePassword(void);
void Control_lights (void);

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

/*
 * Description :
 * Control create Password .
 */
Timer1_ConfigType Timer1_Config={0,3200,F_CPU_1024,CompareMode};
void Control_createPassword(void)
{
	while(1)
	{
		UART_sendByte(ENTER_NEW_PASSWORD);
		Create_newPassword();
		UART_sendByte(RE_ENTER_NEW_PASSWORD);

		uint8 again =reenter_newPassword();
		if(again==UNMATCHED_PASSWORD)
		{
			UART_sendByte(ENTER_NEW_PASSWORD);
		}
		else
		{
			break;
		}
	}
}
/*
 * Description :
 * Create Password .
 */
void Create_newPassword(void)
{
	uint16 i,recieve  ;
	new_password =0;
	UART_sendByte(READY_CONTROL_ECU);

	for(i=0;i<5;i++)
	{
		recieve= UART_recieveByte();
		if(recieve =='=')
		{
			break;
		}
		else
		{
			new_password =(new_password*10)+recieve;
		}
	}
}

/*
 * Description :
 * Reenter password .
 */
uint8 reenter_newPassword(void)
{
	uint8 i,  recieve;
	reenter_password = 0;
	UART_sendByte(READY_CONTROL_ECU);

	for(i = 0 ; i < 5; i++)
	{
		recieve =UART_recieveByte();
		if(recieve =='=')
		{
			break;
		}
		else
		{
			reenter_password =(reenter_password * 10)+ recieve;
		}
	}
	if (new_password ==reenter_password)
	{
		save_newPassword();
		return MATCHED_PASSWORD;
	}
	else
	{
		return UNMATCHED_PASSWORD;
	}
}

/*
 * Description :
 * Store Password .
 */
void save_newPassword(void)
{
	eepromSave_location1 =263 ;
	eepromSave_password= new_password;
	eepromSave_location2= eepromSave_location1;

	while(eepromSave_password !=  0 )
	{
		EEPROM_writeByte(eepromSave_location2,eepromSave_password %10);
		_delay_ms(10);
		eepromSave_location2++;
		eepromSave_password= eepromSave_password / 10;
	}
	eepromSave_location2--;
}

/*
 * Description :
 * Main Options , 1. Open door , 2. Change Password    .
 */
uint8 main_options(void)
{
	UART_sendByte(READY_CONTROL_ECU);

	while(1)
	{
		KEY_NUM = UART_recieveByte();
		if(	KEY_NUM == '+'  ||   KEY_NUM == '-' || KEY_NUM == '*' )
		{
			break;
		}
	}
	return KEY_NUM;
}

/*
 * Description :
 * Timer One Count    .
 */

void timer1(void)
{
	g_tick++;
}

/*
 * Description :
 *  Open Door.
 */
void open_door(void)
{
	DcMotor_Rotate(CW, 100);
	Timer1_setCallBack(timer1);
	Timer1_init(&Timer1_Config);
	while(g_tick <  15);

	Timer1_deInit();
	g_tick =0;
	DcMotor_Rotate(STOP, 0);
	Timer1_setCallBack(timer1);
	Timer1_init(&Timer1_Config);
	while(g_tick < 3);

	Timer1_deInit();
	g_tick =0;
}

/*
 * Description :
 * Close Door.
 */
void close_door(void)
{
	DcMotor_Rotate(ACW, 100);
	Timer1_setCallBack(timer1);
	Timer1_init(&Timer1_Config);
	while(g_tick < 15);

	Timer1_deInit();
	g_tick = 0 ;
	DcMotor_Rotate(STOP, 0);
}

/*
 * Description :
 * Control ECU Open Door.
 */
void Control_openDoor(void)
{
	while(1)
	{
		UART_sendByte(ENTER_NEW_PASSWORD);
		enter_newPassword();

		if (compare_newPassword() ==  MATCHED_PASSWORD)
		{
			counter_password = 0 ;
			UART_sendByte(OPEN_DOOR);
			open_door();
			UART_sendByte(CLOSE_DOOR);
			close_door();
			return;
		}
		else
		{
			unmached_pass();
		}
	}
}

/*
 * Description :
 * Enter Password
 */

void enter_newPassword(void)
{

	uint8 i,recieve;
	password = 0 ;
	UART_sendByte(0);

	for( i = 0 ; i < 5 ; i++ )
	{
		recieve= UART_recieveByte();
		if(recieve== '=')
		{
			break;
		}
		else
			password= (password*10)+recieve;
	}
}

/*
 * Description :
 * Compare Password
 */

uint8 compare_newPassword (void)
{
	save_password=0;
	uint16 i ;
	uint8 comp = 0 ;

	for( i = eepromSave_location2 ; i >= eepromSave_location1 ; i-- )
	{
		EEPROM_readByte(i ,  &comp );
		save_password = (save_password*10)+comp;
	}
	if(password == save_password)
	{
		return MATCHED_PASSWORD;
	}
	else
	{
		return UNMATCHED_PASSWORD;
	}
}
/*
 * Description :
 * Unmatched Password
 */

void unmached_pass(void)
{
	counter_password++;

	if( counter_password == 3 )
	{
		counter_password = 0 ;
		UART_sendByte(BUZZER_ON) ;
		Buzzer_on() ;
		Timer1_setCallBack(timer1);
		Timer1_init(&Timer1_Config);
		while(g_tick < 60);

		Timer1_deInit();
		g_tick =0;
		Buzzer_off();
	}
	return;
}


void Control_lights (void)
{
	//led light
	GPIO_setupPinDirection(PORTB, PIN4, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTB, PIN5, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTB, PIN6, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTB, PIN7, PIN_OUTPUT);
	// switch
	GPIO_setupPinDirection(PORTB, PIN4, PIN_INPUT);
	GPIO_setupPinDirection(PORTB, PIN5, PIN_INPUT);
	GPIO_setupPinDirection(PORTB, PIN6, PIN_INPUT);
	GPIO_setupPinDirection(PORTB, PIN7, PIN_INPUT);


}
/*
 * Description :
 * Control ECU Change Password
 */
void Control_changePassword(void)
{
	while(1)
	{
		UART_sendByte(ENTER_NEW_PASSWORD) ;
		enter_newPassword() ;
		if ( compare_newPassword() == MATCHED_PASSWORD )
		{
			counter_password = 0 ;
			Control_createPassword() ;
			return;
		}
	}
}


/*******************************************************************************
 *                        Main Control ECU Functions                           *
 *******************************************************************************/
int main(void)
{
	initGPIO();
	    initTimer();
	    sei(); // Enable global interrupts

	Buzzer_init();
	DcMotor_init();
	SREG  |= (1<<7) ;

	UART_ConfigType UART_Config ={BIT_8 , DISABLED_PARITY , STOP_ONE_BIT , 9600 };
	UART_init( &UART_Config );

	TWI_ConfigType TWI_Config ={ 0x01 , 0x02 } ;
	TWI_init( &TWI_Config ) ;

	while( UART_recieveByte() != 0 ) ;
	Control_createPassword();

	while(1)
	{
		checkButtonState();
		        handleButtonPress();
		UART_sendByte(MAIN_OPTIONS);

		if(main_options() == '+' )
		{
			Control_openDoor();
		}

		else if (main_options() == '-')
		{
			Control_changePassword();
		}
		else
		{
			Control_lights();
		}
	}
	return 0 ;
}
